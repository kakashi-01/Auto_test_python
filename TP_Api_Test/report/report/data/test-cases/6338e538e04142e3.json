{
  "uid" : "6338e538e04142e3",
  "name" : "test_login_image",
  "fullName" : "test_login.TestLogin#test_login_image",
  "historyId" : "58723ec5147528dbe95a3421fe189222",
  "time" : {
    "start" : 1611055624265,
    "stop" : 1611055624265,
    "duration" : 0
  },
  "description" : "自动截图",
  "descriptionHtml" : "<p>自动截图</p>\n",
  "status" : "broken",
  "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: '../report/test.jpg'",
  "statusTrace" : "self = <TP_Api_Test.test_case.test_login.TestLogin object at 0x0000028050465250>\n\n    @allure.story('登录界面')\n    @allure.severity('critical')\n    @allure.description('自动截图')\n    def test_login_image(self):\n>       allure.attach.file(r'../report/test.jpg','我是附件截图的名字',\n        attachment_type=allure.attachment_type.JPG)\n\ntest_login.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\allure_commons\\_allure.py:182: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\allure_pytest\\listener.py:224: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\allure_commons\\reporter.py:113: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\allure_commons\\logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\nd:\\program files (x86)\\python\\python39\\lib\\shutil.py:435: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = '../report/test.jpg'\ndst = 'D:\\\\Auto_test_python\\\\TP_Api_Test\\\\report\\\\tmp\\\\4ab61521-1d49-4067-8b51-a82e2bfa1d8e-attachment.jpg'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc, open(dst, 'wb') as fdst:\nE           FileNotFoundError: [Errno 2] No such file or directory: '../report/test.jpg'\n\nd:\\program files (x86)\\python\\python39\\lib\\shutil.py:264: FileNotFoundError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "自动截图",
    "status" : "broken",
    "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: '../report/test.jpg'",
    "statusTrace" : "self = <TP_Api_Test.test_case.test_login.TestLogin object at 0x0000028050465250>\n\n    @allure.story('登录界面')\n    @allure.severity('critical')\n    @allure.description('自动截图')\n    def test_login_image(self):\n>       allure.attach.file(r'../report/test.jpg','我是附件截图的名字',\n        attachment_type=allure.attachment_type.JPG)\n\ntest_login.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\allure_commons\\_allure.py:182: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\allure_pytest\\listener.py:224: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\allure_commons\\reporter.py:113: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nd:\\program files (x86)\\python\\python39\\lib\\site-packages\\allure_commons\\logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\nd:\\program files (x86)\\python\\python39\\lib\\shutil.py:435: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = '../report/test.jpg'\ndst = 'D:\\\\Auto_test_python\\\\TP_Api_Test\\\\report\\\\tmp\\\\4ab61521-1d49-4067-8b51-a82e2bfa1d8e-attachment.jpg'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc, open(dst, 'wb') as fdst:\nE           FileNotFoundError: [Errno 2] No such file or directory: '../report/test.jpg'\n\nd:\\program files (x86)\\python\\python39\\lib\\shutil.py:264: FileNotFoundError",
    "steps" : [ ],
    "attachments" : [ {
      "name" : "我是附件截图的名字",
      "type" : "image/jpg",
      "size" : 0
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "登录模块"
  }, {
    "name" : "story",
    "value" : "登录接口"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "story",
    "value" : "登录界面"
  }, {
    "name" : "epic",
    "value" : "TP系统"
  }, {
    "name" : "tag",
    "value" : "Login(order=1)"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-5R42TFK"
  }, {
    "name" : "thread",
    "value" : "7520-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "Login(order=1)" ]
  },
  "source" : "6338e538e04142e3.json",
  "parameterValues" : [ ]
}